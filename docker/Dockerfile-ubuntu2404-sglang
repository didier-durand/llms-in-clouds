FROM ubuntu:24.04
ARG CUDA_REPO="https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64"

# to extend / customize SGLang at build time
ARG CUSTOMIZE_SGLANG="customize_sglang.sh"
# to extend / customize SGLang launch steps and parameters
ARG START_SGLANG="start_sglang.sh"
# model dir must be created at image build time to allow volume bind mounts on container start
ARG SGL_MODEL_DIR="/home/model"
# to create directory for accessing model weights via local storage (Docker volume)
WORKDIR ${SGL_MODEL_DIR}
# to create directory for SGLang extensions
WORKDIR "/home/sglang"

# versions of components
ARG CUDA_VERSION_MAJOR="12"
ARG CUDA_VERSION_DASH="12-6"
ARG CUDA_VERSION_DOT="12.6"
ARG PYTHON_VERSION="3.12"
ARG TORCH_VERSION="2.6"
ARG SGL_VERSION="0.5.1.post3"

ARG SGL_TP_SIZE=2

ARG SGL_HOST="0.0.0.0"
ARG SGL_PORT=30000

 # debug, info, warning, error
ARG SGL_LOG_LEVEL="info"

# install headers, tools & utilities (ca-certificates required to access Nvidia repo)
# hadolint ignore=DL3008
RUN apt-get update -y \
    && apt-get upgrade -y  \
    && apt-get install -y --no-install-recommends curl wget findutils which grep sed git patch ca-certificates \
    && apt-get install -y --no-install-recommends linux-headers-generic \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# install Nvividia CUDA
# see https://docs.nvidia.com/cuda/cuda-installation-guide-linux/#amazon-linux
# https://developer.nvidia.com/cusparselt-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=24.04&target_type=deb_network
# hadolint ignore=DL3008
RUN wget --quiet --no-check-certificate ${CUDA_REPO}/cuda-keyring_1.1-1_all.deb  \
    && dpkg -i cuda-keyring_1.1-1_all.deb \
    && apt-get update -y \
    && apt-get upgrade -y  \
    && apt-get install -y --no-install-recommends cuda-toolkit-${CUDA_VERSION_DASH}  \
    && apt-get install -y --no-install-recommends nvidia-gds-${CUDA_VERSION_DASH} \
    && apt-get install -y --no-install-recommends cudnn9-cuda-${CUDA_VERSION_DASH} libcudnn9-static-cuda-${CUDA_VERSION_MAJOR}=9.6.0.74-1 libcudnn9-dev-cuda-${CUDA_VERSION_MAJOR}=9.6.0.74-1 libcudnn9-cuda-${CUDA_VERSION_MAJOR}=9.6.0.74-1 \
    && apt-get install -y --no-install-recommends libcusparselt0 libcusparselt-dev \
    && apt-get install -y --no-install-recommends libnccl2 libnccl-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV PATH=${PATH}:/usr/local/cuda-${CUDA_VERSION_DOT}/bin
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda-${CUDA_VERSION_DOT}/lib64

# install Python
# hadolint ignore=DL3008
RUN apt-get update -y  \
    && apt-get install -y --no-install-recommends python${PYTHON_VERSION} python3-pip python${PYTHON_VERSION}-dev  \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*


# install sglang
RUN python${PYTHON_VERSION} -m pip install --break --upgrade --no-cache-dir "sglang[all]==${SGL_VERSION}"

# save build versions to consult at runtime
RUN echo "cuda version: ${CUDA_VERSION_DASH}" >> sglang_versions.txt \
    && echo "python version: ${PYTHON_VERSION}" >> sglang_versions.txt \
    && echo "torch version: ${TORCH_VERSION}" >> sglang_versions.txt \
    && echo "sglang version: ${SGL_VERSION}" >> sglang_versions.txt

COPY "extend/"${CUSTOMIZE_SGLANG} ${CUSTOMIZE_SGLANG}
COPY "extend/"${START_SGLANG} ${START_SGLANG}
RUN ls -lh
    # && bash ${CUSTOMIZE_SGLANG}

# turn needed build args into runtime env vars
# set up python version
ENV PYTHON_VERSION=${PYTHON_VERSION}
# communication parameters
ENV SGL_PORT=${SGL_PORT}
ENV SGL_HOST=${SGL_HOST}
# SGLang parameters
ENV SGL_TP_SIZE=${SGL_TP_SIZE}
ENV SGL_LOG_LEVEL=${SGL_LOG_LEVEL}
ENV SGL_PARAMS=""
# model info
ENV SGL_MODEL=""
ENV SGL_MODEL_DIR=${SGL_MODEL_DIR}

EXPOSE ${SGL_PORT}

# trying to avoid CUDA out-of-memory errors.
# see https://pytorch.org/docs/stable/notes/cuda.html
# also https://iamholumeedey007.medium.com/memory-management-using-pytorch-cuda-alloc-conf-dabe7adec130
ENV PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True

CMD ["bash", "-c", "bash start_sglang.sh || sleep infinity"]